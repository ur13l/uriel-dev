type Blog
  @model
  @auth(rules: [{ allow: public, operations: [read] }, { allow: private }]) {
  id: ID!
  name: String!
  mainImage: String
  slug: String!
  posts: [Post] @connection(keyName: "byBlog", fields: ["id"])
}

type Category
  @model
  @auth(rules: [{ allow: public, operations: [read] }, { allow: private }]) {
  id: ID!
  name: String!
  description: String!
  mainImage: String!
  slug: String!
  posts: [Post] @connection(keyName: "byCategory", fields: ["id"])
}

type SocialMedia
  @model
  @key(name: "byAuthor", fields: ["authorID"])
  @auth(rules: [{ allow: public, operations: [read] }, { allow: private }]) {
  id: ID!
  name: String!
  link: String!
  logo: String!
  authorID: ID!
  author: Author @connection(fields: ["authorID"])
}

type Author
  @model
  @auth(rules: [{ allow: public, operations: [read] }, { allow: private }]) {
  id: ID!
  name: String!
  lastname: String!
  bio: String
  image: String!
  socialMedia: [SocialMedia] @connection(keyName: "byAuthor", fields: ["id"])
  posts: [Post] @connection(keyName: "byAuthor", fields: ["id"])
}

type Post
  @model
  @key(
    name: "byBlog"
    fields: ["blogID", "createdAt"]
    queryField: "getPostsByCreatedAt"
  )
  @key(name: "byAuthor", fields: ["authorID"], queryField: "getPostsByAuthor")
  @key(
    name: "byCategory"
    fields: ["categoryID"]
    queryField: "getPostsByCategory"
  )
  @auth(rules: [{ allow: public, operations: [read, create] }])
  @aws_api_key
  @aws_cognito_user_pools {
  id: ID!
  title: String!
  blogID: ID!
  blog: Blog @connection(fields: ["blogID"])
  categoryID: ID!
  category: Category @connection(fields: ["categoryID"])
  content: String!
  featuredImage: String
  authorID: ID!
  searchValue: String!
  author: Author @connection(fields: ["authorID"])
  tags: [PostTag] @connection(keyName: "byPost", fields: ["id"])
  createdAt: AWSDateTime!
}

type PostTag
  @model(queries: null)
  @key(
    name: "byPost"
    fields: ["postID", "tagID"]
    queryField: "getPostTagByPost"
  )
  @key(
    name: "byTag"
    fields: ["tagID", "postID"]
    queryField: "getPostTagByTag_"
  ) {
  id: ID!
  postID: ID!
  tagID: ID!
  post: Post! @connection(fields: ["postID"])
  tag: Tag! @connection(fields: ["tagID"])
}

type Tag @model {
  id: ID!
  name: String!
  slug: String!
  posts: [PostTag] @connection(keyName: "byTag", fields: ["id"])
}

type ImageResponse {
  msg: String!
  code: Int!
  data: DataResponse!
}

type DataResponse {
  errFiles: [String]!
  succMap: String!
}

type Query {
  uploadImage(file: String!, extension: String!): ImageResponse
    @function(name: "uploadImageBlog-${env}")
}
